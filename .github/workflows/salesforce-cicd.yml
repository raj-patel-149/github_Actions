# name: Salesforce CI/CD

# on:
#   pull_request:
#     branches: [main]
#   push:
#     branches: [main]

# jobs:
#   code-checks:
#     name: Code Quality Checks
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies
#         run: npm install --legacy-peer-deps

#       - name: Run ESLint
#         run: npx eslint .

#       - name: Run PMD
#         run: |
#           wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
#           unzip pmd-bin-6.55.0.zip
#           ./pmd-bin-6.55.0/bin/run.sh pmd -d force-app -R category/apex/design.xml -f text

#       - name: SonarQube Scan
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: |
#           npm install -g sonarqube-scanner
#           sonar-scanner \
#             -Dsonar.projectKey=raj-patel-149_salesForce \
#             -Dsonar.organization=raj-patel-149 \
#             -Dsonar.sources=. \
#             -Dsonar.host.url=https://sonarcloud.io \
#             -Dsonar.login=${SONAR_TOKEN}

#   test-coverage:
#     name: Apex Test Coverage
#     runs-on: ubuntu-latest
#     needs: code-checks
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Salesforce CLI
#         run: |
#           npm install sfdx-cli --global
#           echo "${{ secrets.SF_JWT_KEY }}" > server.key
#           sfdx auth:jwt:grant --clientid ${{ secrets.SF_CLIENT_ID }} --jwtkeyfile server.key --username ${{ secrets.SF_USERNAME_QA }} --setalias QA --instanceurl https://login.salesforce.com
#           sf project deploy validate --source-dir force-app --async --test-level RunAllTestsInOrg --target-org QA

#   deploy-to-qa:
#     name: Deploy to QA
#     runs-on: ubuntu-latest
#     needs: test-coverage
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Salesforce CLI
#         run: |
#           npm install sfdx-cli --global
#           sfdx

#       - name: Authenticate with Salesforce
#         run: |
#           echo "${{ secrets.SF_JWT_KEY }}" > server.key
#           sfdx auth:jwt:grant --clientid ${{ secrets.SF_CLIENT_ID }} --jwtkeyfile server.key --username ${{ secrets.SF_USERNAME_QA }} --setalias QA --instanceurl https://login.salesforce.com

name: Salesforce CI/CD

# Triggers the workflow on push or pull request events on the "main" branch
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  ####################################
  # Job 1: Code Quality Checks
  ####################################
  code-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout your repo source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Install npm dependencies (use --legacy-peer-deps to avoid peer issues)
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # Step 4: Run ESLint on the codebase
      - name: Run ESLint
        run: npx eslint .

      # Step 5: Run PMD for Apex static code analysis
      - name: Run PMD
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
          unzip pmd-bin-6.55.0.zip
          ./pmd-bin-6.55.0/bin/run.sh pmd -d force-app -R category/apex/design.xml -f text

      # Step 6: SonarQube Code Scan (requires SONAR_TOKEN in GitHub secrets)
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=raj-patel-149_github_Actions \
            -Dsonar.organization=raj-patel-149 \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN}

  ####################################
  # Job 2: Apex Test Coverage
  ####################################
  test-coverage:
    name: Apex Test Coverage
    runs-on: ubuntu-latest
    needs: code-checks
    if: github.event_name == 'pull_request'

    steps:
      # Step 1: Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Salesforce CLI (v2, with sf + sfdx support)
      - name: Install Salesforce CLI
        run: |
          npm install --global @salesforce/cli
          echo "Salesforce CLI version:"
          sfdx --version
          echo "SF CLI version:"
          sf --version || echo "sf not available in this version"

      # Step 3: Authenticate to Salesforce using JWT auth
      - name: Authenticate with Salesforce (QA)
        run: |
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          sf org login jwt \
            --client-id ${{ secrets.SF_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SF_USERNAME_QA }} \
            --alias QA \
            --instance-url https://login.salesforce.com

      # Step 4: Validate deployment and run all Apex tests
      - name: Validate Deployment & Run Tests
        run: |
          sf project deploy validate \
            --source-dir force-app \
            --test-level RunAllTestsInOrg \
            --target-org QA \
            --wait 10 \
            --json

      # Step 5: Get last test run and show results with code coverage
      - name: Report Apex Test Coverage
        run: |
          TEST_RUN_ID=$(sf apex test list --target-org QA --json | jq -r '.result[0].id')
          sf apex test report --test-run-id $TEST_RUN_ID --target-org QA --code-coverage --json

  ####################################
  # Job 3: Deployment to QA
  ####################################
  deploy-to-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'pull_request'

    steps:
      # Step 1: Checkout your code again
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          npm install --global sfdx-cli
          echo "Salesforce CLI version:"
          sfdx --version
          echo "SF CLI version:"
          sf --version || echo "sf not available in this version"

      # Step 3: Authenticate to Salesforce
      - name: Authenticate with Salesforce (QA)
        run: |
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          sfdx auth:jwt:grant --clientid ${{ secrets.SF_CLIENT_ID }} --jwtkeyfile server.key --username ${{ secrets.SF_USERNAME_QA }} --setalias QA --instanceurl https://login.salesforce.com

      # Step 4: Deploy the code to QA
      - name: Deploy Code to QA
        run: |
          sf project deploy start -p force-app -o QA --wait 10 --json

      # Optional Step: Post-deploy test run (if needed)
      - name: Post Deployment Test (Optional)
        run: |
          sf apex test run --target-org QA --wait 10 --coverage-format human --output-dir coverage
